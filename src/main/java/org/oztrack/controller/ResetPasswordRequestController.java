package org.oztrack.controller;

import java.util.Calendar;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.oztrack.app.OzTrackApplication;
import org.oztrack.data.access.UserDao;
import org.oztrack.data.model.User;
import org.oztrack.util.EmailBuilder;
import org.oztrack.util.EmailBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class ResetPasswordRequestController {
    private final Logger logger = Logger.getLogger(getClass());

    @Autowired
    private UserDao userDao;

    @Autowired
    private EmailBuilderFactory emailBuilderFactory;

    /*
    @RequestMapping(value="/reset-password", method=RequestMethod.GET)
    public String getView(
        Model model
    ) {
        return "reset-password-request";
    }
    */

    /*
    @RequestMapping(value="/reset-password", method=RequestMethod.POST)
    public String processPost(
        HttpServletRequest request,
        Model model,
        @RequestParam(value="email", required=false) String email
    ) {
        if (StringUtils.isBlank(email)) {
            model.addAttribute("errorMessage", "No email address was entered.");
            return "reset-password-request";
        }
        User user = userDao.getByEmail(email);
        if (user == null) {
            model.addAttribute("errorMessage", "The email address " + email + " is not associated with any account.");
            return "reset-password-request";
        }
        try {
            sendResetPasswordEmail(request.getRequestURL().toString(), user);
        }
        catch (Exception e) {
            logger.error("Error sending password reset email", e);
            model.addAttribute("errorMessage", "Error sending password reset email: " + e.getMessage());
            return "reset-password-request";
        }
        model.addAttribute("successMessage", "A password reset link has been sent to " + email);
        return "reset-password-request";
    }
    */
    
    private void sendResetPasswordEmail(String url, User user) throws Exception {
        String passwordResetToken = UUID.randomUUID().toString();
        Calendar passwordResetExpiresAtCalendar = Calendar.getInstance();
        Integer passwordResetExpiryDays = OzTrackApplication.getApplicationContext().getPasswordResetExpiryDays();
        passwordResetExpiresAtCalendar.add(Calendar.DAY_OF_MONTH, passwordResetExpiryDays);
        user.setPasswordResetToken(passwordResetToken);
        user.setPasswordResetExpiresAt(passwordResetExpiresAtCalendar.getTime());

        EmailBuilder emailBuilder = emailBuilderFactory.getObject();
        emailBuilder.to(user);
        emailBuilder.subject("ZoaTrack password reset");

        String passwordResetLink = url + "/" + user.getPasswordResetToken();

        StringBuilder htmlMsgContent = new StringBuilder();
        htmlMsgContent.append("<p>This message has been generated by ZoaTrack in response to a <b>password reset request</b>.</p>\n");
        htmlMsgContent.append("<p>If you did not submit this request, you can safely ignore this message.</p>\n");
        htmlMsgContent.append("<p>Click on the following link to reset your password:</p>\n");
        htmlMsgContent.append("<p><a href=\"" + passwordResetLink + "\">" + passwordResetLink + "</a></p>\n");
        htmlMsgContent.append("<p>Note: for security reasons, this link will expire in " + passwordResetExpiryDays + " days.</p>\n");
        emailBuilder.htmlMsgContent(htmlMsgContent.toString());

        StringBuilder textMsgContent = new StringBuilder();
        textMsgContent.append("This message has been generated by ZoaTrack in response to a password reset\n");
        textMsgContent.append("request. If you did not submit this request, you can safely ignore this\n");
        textMsgContent.append("message.\n");
        textMsgContent.append("\n");
        textMsgContent.append("Click on the following link to reset your password:\n");
        textMsgContent.append("\n");
        textMsgContent.append(passwordResetLink + "\n");
        textMsgContent.append("\n");
        textMsgContent.append("Note: for security reasons, this link will expire in " + passwordResetExpiryDays + " days.");
        emailBuilder.textMsgContent(textMsgContent.toString());

        emailBuilder.build().send();

        userDao.update(user);
    }
}
